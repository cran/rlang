% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots.R, R/vec-new.R
\name{tidy-dots}
\alias{tidy-dots}
\alias{dots_list}
\alias{list2}
\title{Collect dots tidily}
\usage{
dots_list(..., .ignore_empty = c("trailing", "none", "all"),
  .preserve_empty = FALSE, .homonyms = c("keep", "first", "last",
  "error"), .check_assign = FALSE)

list2(...)
}
\arguments{
\item{...}{Arguments to collect with \code{!!!} support.}

\item{.ignore_empty}{Whether to ignore empty arguments. Can be one
of \code{"trailing"}, \code{"none"}, \code{"all"}. If \code{"trailing"}, only the
last argument is ignored if it is empty.}

\item{.preserve_empty}{Whether to preserve the empty arguments that
were not ignored. If \code{TRUE}, empty arguments are stored with
\code{\link[=missing_arg]{missing_arg()}} values. If \code{FALSE} (the default) an error is
thrown when an empty argument is detected.}

\item{.homonyms}{How to treat arguments with the same name. The
default, \code{"keep"}, preserves these arguments. Set \code{.homonyms} to
\code{"first"} to only keep the first occurrences, to \code{"last"} to keep
the last occurrences, and to \code{"error"} to raise an informative
error and indicate what arguments have duplicated names.}

\item{.check_assign}{Whether to check for \code{<-} calls passed in
dots. When \code{TRUE} and a \code{<-} call is detected, a warning is
issued to advise users to use \code{=} if they meant to match a
function parameter, or wrap the \code{<-} call in braces otherwise.
This ensures assignments are explicit.}
}
\value{
A list of arguments. This list is always named: unnamed
arguments are named with the empty string \code{""}.
}
\description{
\code{list2()} is equivalent to \code{list(...)} but provides tidy
dots semantics:
\itemize{
\item You can splice other lists with the
\link[=quasiquotation]{unquote-splice} \code{!!!} operator.
\item You can unquote names by using the \link[=quasiquotation]{unquote}
operator \code{!!} on the left-hand side of \code{:=}.
}

We call quasiquotation support in dots \strong{tidy dots} semantics and
functions taking dots with \code{list2()} tidy dots functions.
Quasiquotation is an alternative to \code{do.call()} idioms and gives
the users of your functions an uniform syntax to supply a variable
number of arguments or a variable name.

\code{dots_list()} is a lower-level version of \code{list2()} that offers
additional parameters for dots capture.
}
\details{
Note that while all tidy eval \link[=quotation]{quoting functions} have
tidy dots semantics, not all tidy dots functions are quoting
functions. \code{list2()} is for standard functions, not quoting
functions.
}
\section{Life cycle}{


One difference of \code{dots_list()} with \code{list2()} is that it always
allocates a vector of names even if no names were supplied. In this
case, the names are all empty \code{""}. This is for consistency with
\code{\link[=enquos]{enquos()}} and \code{\link[=enexprs]{enexprs()}} but can be quite costly when long lists
are spliced in the results. For this reason we plan to parameterise
this behaviour with a \code{.named} argument and possibly change the
default. \code{list2()} does not have this issue.
}

\examples{
# Let's create a function that takes a variable number of arguments:
numeric <- function(...) {
  dots <- list2(...)
  num <- as.numeric(dots)
  set_names(num, names(dots))
}
numeric(1, 2, 3)

# The main difference with list(...) is that list2(...) enables
# the `!!!` syntax to splice lists:
x <- list(2, 3)
numeric(1, !!! x, 4)

# As well as unquoting of names:
nm <- "yup!"
numeric(!!nm := 1)


# One useful application of splicing is to work around exact and
# partial matching of arguments. Let's create a function taking
# named arguments and dots:
fn <- function(data, ...) {
  list2(...)
}

# You normally cannot pass an argument named `data` through the dots
# as it will match `fn`'s `data` argument. The splicing syntax
# provides a workaround:
fn("wrong!", data = letters)  # exact matching of `data`
fn("wrong!", dat = letters)   # partial matching of `data`
fn(some_data, !!!list(data = letters))  # no matching


# Empty arguments trigger an error by default:
try(fn(, ))

# You can choose to preserve empty arguments instead:
list3 <- function(...) dots_list(..., .preserve_empty = TRUE)

# Note how the last empty argument is still ignored because
# `.ignore_empty` defaults to "trailing":
list3(, )

# The list with preserved empty arguments is equivalent to:
list(missing_arg())


# Arguments with duplicated names are kept by default:
list2(a = 1, a = 2, b = 3, b = 4, 5, 6)

# Use the `.homonyms` argument to keep only the first of these:
dots_list(a = 1, a = 2, b = 3, b = 4, 5, 6, .homonyms = "first")

# Or the last:
dots_list(a = 1, a = 2, b = 3, b = 4, 5, 6, .homonyms = "last")

# Or raise an informative error:
try(dots_list(a = 1, a = 2, b = 3, b = 4, 5, 6, .homonyms = "error"))


# dots_list() can be configured to warn when a `<-` call is
# detected:
my_list <- function(...) dots_list(..., .check_assign = TRUE)
my_list(a <- 1)

# There is no warning if the assignment is wrapped in braces.
# This requires users to be explicit about their intent:
my_list({ a <- 1 })
}
\seealso{
\code{\link[=exprs]{exprs()}} for extracting dots without evaluation.
}
